service: ${self:custom.skillsmapper.name}-pipeline

frameworkVersion: ">=1.0.0 <2.0.0"

plugins:
  - serverless-step-functions

custom:
  skillsmapper: ${file(../skillsmapper.yml)}
  private: ${file(../private.yml)}
  events: ${file(../events.yml)}
  tables: ${file(../tables.yml)}

provider:
  name: aws
  runtime: nodejs6.10
  region: ${self:custom.private.region}
  environment:
    NEO4J_URL: ${self:custom.private.neo4j-url}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - "sns:Publish"
      Resource:
       - "Ref" : "MessageReceived"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - "table/"
            - ${self:custom.skillsmapper.name}
            - "-"
            - ${self:custom.tables.messages-received}
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - ${self:resources.Outputs.EmailStateMachine.Value}


functions:
  processEmail:
    handler: processEmail.processEmail
    environment:
      STATEMACHINE_ARN: ${self:resources.Outputs.EmailStateMachine.Value}
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":"
                - ${self:custom.skillsmapper.name}
                - "-"
                - ${self:custom.events.new-email}
          topicName: ${self:custom.skillsmapper.name}-${self:custom.events.new-email}
  storeMessage:
    handler: storeMessage.storeMessage
    environment:
      MESSAGES_RECEIVED_TABLE: ${self:custom.skillsmapper.name}-${self:custom.tables.messages-received}
  storeFact:
    handler: storeFact.storeFact
  validateTags:
    handler: validateTags.validateTags
  storeTagValidity:
    handler: storeTagValidity.storeTagValidity
  retrieveTagDescription:
    handler: retrieveTagDescription.retrieveTagDescription
stepFunctions:
  stateMachines:
    EmailStateMachine:
      name: EmailStateMachine
      definition:
        StartAt: Store
        States:
          Finish:
            Type: Pass
            Result: last
            End: true
          Store:
            Type: Parallel
            Next: Finish
            Branches:
              - StartAt: StoreMessage
                States:
                  StoreMessage:
                    Type: Task
                    Resource: "arn:aws:lambda:${self:custom.private.region}:${self:custom.private.account-id}:function:${self:service}-${opt:stage}-storeMessage"
                    InputPath: "$.message"
                    ResultPath: "$.result"
                    OutputPath: "$"
                    End: true
              - StartAt: StoreFact
                States:
                  StoreFact:
                    Type: Task
                    Resource: "arn:aws:lambda:${self:custom.private.region}:${self:custom.private.account-id}:function:${self:service}-${opt:stage}-storeFact"
                    InputPath: "$.message"
                    ResultPath: "$.result"
                    OutputPath: "$.result"
                    Next: UnknownTagCheck
                  UnknownTagCheck:
                    Type: Choice
                    Choices:
                    - Variable: "$.unknownTagCount"
                      NumericGreaterThan: 0
                      Next: ValidateTags
                    Default: FinishedFact
                  ValidateTags:
                    Type: Task
                    Resource: "arn:aws:lambda:${self:custom.private.region}:${self:custom.private.account-id}:function:${self:service}-${opt:stage}-validateTags"
                    Next: StoreTagValidity
                  StoreTagValidity:
                    Type: Task
                    Resource: "arn:aws:lambda:${self:custom.private.region}:${self:custom.private.account-id}:function:${self:service}-${opt:stage}-storeTagValidity"
                    Next: RetrieveTagDescription
                  RetrieveTagDescription:
                    Type: Task
                    Resource: "arn:aws:lambda:${self:custom.private.region}:${self:custom.private.account-id}:function:${self:service}-${opt:stage}-retrieveTagDescription"
                    Next: FinishedFact
                  FinishedFact:
                    Type: Pass
                    Result: "Finished fact"
                    End: true
resources:
  Resources:
    NewEmail:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.skillsmapper.name}-${self:custom.events.new-email}
    MessageReceived:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.skillsmapper.name}-${self:custom.events.message-received}
    MessagesReceivedDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.skillsmapper.name}-${self:custom.tables.messages-received}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  Outputs:
    EmailStateMachine:
      Description: The ARN of the test state machine
      Value:
        Ref: EmailStateMachine